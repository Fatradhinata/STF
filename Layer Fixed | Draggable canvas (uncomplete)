<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Drag n move</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,300;0,400;0,500;0,600;1,500&display=swap"
        rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
        }

        @import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,300;0,400;0,500;0,600;1,500&display=swap');

        .shapeangle {
            background-color: darkcyan;
            width: 100px;
            height: 100px;
            margin: 0 auto;
            cursor: pointer;

        }

        .shapeangle1 {
            background-color: darkcyan;
            width: 100px;
            height: 100px;
            margin: 0 auto;
            cursor: pointer;
            top: 50%;
        }

        form {
            position: absolute;
            left: 50%;
        }

        .layer {
            width: 200px;
            height: 100vh;
            background-color: rgb(122, 122, 122);
            text-align: center;
            position: absolute;
            user-select: none;
        }

        .layer p {
            background-color: aliceblue;
            display: inline-block;
            margin-bottom: 10px;
            padding: 10px;
            text-align: center;
            font-family: Verdana, Geneva, Tahoma, sans-serif;
            font-size: 20px;
        }

        .lyrItems div {
            position: absolute;
            background-color: rgb(155, 155, 155);
        }

        .c.move:hover {
            cursor: move;
        }

        .circle {
            width: 90px;
            position: absolute;
            top: 3%;
            left: 52.8%;
        }

        .dragging {
            opacity: 0.5;
        }
    </style>
</head>

<body>
    <canvas id="canvas" class="c">
    </canvas>
    <div class="layer" id="forLayer">
        <p>Layer Item</p><br><br>
        <div class="lyrItems" id="lyrItems">
        </div>
    </div>
    <form action="">
        <input type="text" id="colorValue">
    </form>
    <button class="circle" id="circle" onclick="addCir()">Add Circle</button>



    <script>
        var but = 0;
        var dragg;
        var dragY, dragX;
        var bal, bol
        var mCount = 0;
        var rec = document.getElementById("shapeangle");
        var lyr = document.getElementById("forLayer");
        var lyrList = document.getElementById("canvas").children; // ex. to call just use lyrList[0]
        var numList = 0;
        var wid;
        var idCount = 1;
        var i = 0;
        wid = lyr.offsetWidth;
        var c = document.querySelector("canvas");
        var canvasWidth = window.innerWidth - lyr.offsetWidth;
        c.width = canvasWidth;
        c.height = window.innerHeight;
        console.log(window.innerWidth - lyr.offsetWidth);
        c.style.position = 'absolute';
        c.style.left = lyr.offsetWidth + "px";
        var cx, cy
        var bool = false

        var first_prs = false
        var second_prs = false
        var paste = false
        var objX, objY;
        var shape = c.getContext("2d")
        var i = 0;
        var rectangle = new Array();
        var rectangleTemp = new Array();
        var ve = new Array(); // Importent for Layer item List

        var hor = []
        var ver = []
        var lebar = []
        var tinggi = []
        var warna = []

        function inputPos(posX, posY, l, t) {
            hor[i] = posX;
            ver[i] = posY;
            lebar[i] = l
            tinggi[i] = t


            this.shapeColor = function (Color) {
                warna[i] = Color

                recShape(hor, ver, lebar, tinggi, warna)

                if (i < hor.length) {
                    i++
                }
            }
        }



        function recShape(x, y, l, t, Color) {
            console.log(x[i], 'x', i,)
            console.log(y[i], 'y', i)

            document.getElementById('colorValue').onkeyup = forColor

            this.draw = function () {

                shape.beginPath()
                shape.rect(x[i], y[i], l[i], t[i])
                console.log(x[i], i, y[i])
                aa()


            }
            this.draw();
            shape.fillStyle = Color[i];
            shape.fill()


            function aa() {
                c.onmousedown = function (e) {
                    cx = e.clientX - wid
                    cy = e.clientY

                    i = hor.length;
                    while (i > 0) {
                        i--
                        console.log(i)
                        objX = x[i]
                        objY = y[i]
                        if (cx >= x[i] && cx <= x[i] + l[i] && cy >= y[i] && cy <= y[i] + t[i]) {
                            document.onmousemove = ObjMove
                            document.onmouseup = mouseUP
                            break;
                        }



                    }
                    // document.onkeydown = keyDown;
                }
            }

            function mouseUP() {
                document.onmousemove = null
                c.classList.remove('move')
                x[i] = objX
                y[i] = objY

            }


            function ObjMove(event) {
                // console.log("Meng Toji",cx, e.clientX-wid)
                c.classList.add('move')

                bool = true

                // console.log("please", x[i], y[i])
                // console.log("obj", objX, objY)
                shape.clearRect(objX, objY, l[i], t[i])
                objX -= cx - (event.clientX - wid);
                objY -= cy - event.clientY;
                cx = event.clientX
                cx -= wid
                cy = event.clientY
                shape.fillStyle = Color[i]
                shape.fillRect(objX, objY, l[i], t[i]);
                var except = i;
                var a = -1
                var b = -1
                x[i] = objX
                y[i] = objY
                while (a < hor.length) {
                    a++
                    shape.clearRect(x[a], y[a], l[a], t[a])
                    shape.fillStyle = Color[a]
                    shape.fillRect(x[a], y[a], l[a], t[a])
                }





                // console.log(cx, cy, objX, objY, i)

                // shape.clearRect(x,y,100,100)
                // shape.fillRect(100,100,100,100)

            }

            function forColor() {
                let inputValue = document.getElementById("colorValue").value;
                console.log(inputValue)
                shape.fillStyle = inputValue;
                shape.clearRect(x[i], y[i], l[i], t[i])
                shape.fillRect(x[i], y[i], l[i], t[i]);
            }

            rectangle[numList] = 'Square ' + numList;
            rectangleTemp[numList] = 'Square ' + numList;
            numList++;

        }


        var square1 = new inputPos(300, 300, 500, 200);
        square1.shapeColor('green');
        var square2 = new inputPos(0, 0, 100, 100);
        square2.shapeColor('darkblue');
        var square3 = new inputPos(700, 0, 100, 100);
        square3.shapeColor('gold');
        var square4 = new inputPos(0, 600, 400, 100);
        square4.shapeColor('darkred');
        var square4 = new inputPos(900, 400, 100, 100);
        square4.shapeColor('gray');

        function item() {
            console.log("Item Execute")
            itemArr = [];
            ve[0] = 0
            for (var dt = 1; dt < hor.length; dt++) {
                ve[dt] = ve[dt - 1] + 32
            }
            for (l = 0; l < hor.length; l++) {
                lyritemName = "<div style=\"transform: translate3d(0," + ve[l] + "px,0);width: 200px;\" id=\"" + l + "\" draggable=\"true\"><span style=\"font-family: 'Poppins'; color:white;\">" + allItems[l] + "</span></div>"
                itemArr[l] = lyritemName;
                document.getElementById("lyrItems").innerHTML += itemArr[l]
                console.log(lyritemName)
                itemDisplay = itemArr
            }

            // document.getElementById("lyrItems").innerHTML = itemDisplay;
            // var itemText = document.getElementById("lyrItems").innerHTML
            // document.getElementById("lyrItems").innerHTML = itemText.replace((/,/g), "")

            return true
        }

        var allItems = new Array();
        let q = 0;
        while (q < rectangle.length) {
            allItems[q] = rectangle[q]
            q++
        }
        item()

        if (rectangle[1] != rectangleTemp[0]) {
            console.log("ITEM")
        }
        var o = 0;
        while (o < rectangle.length) {
            if (rectangle[i] != rectangleTemp[i]) {
                console.log("ITEMS INSIDE FOR EXECUTE")
                items();
            }
            o++
            console.log("ijoijoiasjd")
        }

        var l;

        var drop;
        var itemArr;
        var dragTranfer = null;
        var arrTemp = new Array();
        for (let y = 0; y < allItems.length; y++) {
            arrTemp[y] = rectangle[y]
        }
        var itemDisplay;
        var lyritemName = ""

        var arr = new Array();
        var temp00 = new Array();
        var sort = [];
        var temp222 = new Array()
        var temp333 = new Array()
        for (let r = 0; r < ve.length; r++) {
            temp222[r] = ve[r]
            temp333[r] = ve[r]
        }

        for (let h = 0; h < ve.length; h++) {
            console.table(arr)
            arr[h] = [];
            for (var o = 0; o < ve.length; o++) {
                for (let i = 0; i < ve.length; i++) {

                    if (temp333[o] == ve[i]) {
                        sort[o] = i;
                        break;
                    }
                }

            }
            arr[h].push(sort[h])

            arr[h].push(ve[h])
            console.table(arr)
            // console.log(temp00)
        }


        document.addEventListener('DOMContentLoaded', (event) => {
            var temp;
            console.log("haeiasdk")
            function dragStart(e) {
                this.style.opacity = '0.4';

                dragTranfer = this;
                for (var g = 0; g < itemArr.length; g++) {
                    if (this.innerHTML.includes(g)) {
                        for (l = 0; l < itemArr.length; l++) {
                            if (itemArr[l].includes(g)) {
                                temp = itemArr[l]
                                console.log(temp, l)
                                break;
                            }
                        }

                    }
                }
                e.dataTransfer.effectAllowed = 'move';
                e.dataTransfer.setData('text/html', this.innerHTML);



                for (let h = 0; h < sort.length; h++) {
                    temp00[h] = sort[h]
                    // console.table(temp00)
                }
            }

            function handleDragOver(e) {
                if (e.preventDefault) {
                    e.preventDefault();
                }
                return false;
            }



            function dragDrop(e) {
                var a, e, temp1;
                console.log(arrTemp)
                if (e.stopPropagation) {
                    e.stopPropagation(); // stops the browser from redirecting.
                }
                if (dragTranfer != this) {


                    for (let d = 0; d < arr.length; d++) {
                        console.log(d)
                        if (dragTranfer.innerHTML.includes(arr[d][0])) {
                            console.log("ASDNSFMKSDKSMDPWKOFMJIOSNOFISFKFSJM")
                            for (let e = 0; e < arr.length; e++) {
                                // console.log(e + "asdsa")

                                if (this.innerHTML.includes(arr[e][0])) {
                                    a = e;
                                    var dd = d + 1;
                                    var ee = e + 1;
                                    let temp33 = ve[e]
                                    let temp34 = ve[d]
                                    console.log(e, d)

                                    var k = 0
                    var h = new Array()
                    var v = new Array()
                    var lb = new Array()
                    var t = new Array()
                    var w = new Array()
                    for (let i = 0; i < hor.length; i++) {
                        for (let uu = 0; uu < sort.length; uu++) {

                            if (sort[uu] == i) {
                                h[i] = hor[uu]
                                v[i] = ver[uu]
                                lb[i] = lebar[uu]
                                t[i] = tinggi[uu]
                                w[i] = warna[uu]

                                break;
                            }
                            console.log(h)

                        }
                    }


                                    console.log(dd, e)

                                    console.log(ee)

                                    while (ee <= d) {
                                        sort[ee] = temp00[ee - 1]
                                        console.table(sort)
                                        ee++
                                    }
                                    console.log(e, d)
                                    if (e <= d) {
                                        sort[e] = temp00[d]
                                        console.table(sort)
                                    }
                                    var ee = e + 1;
                                    console.table(sort)

                                    console.log(dd, ee)
                                    console.log(d)
                                    while (dd <= e) {
                                        console.log(sort[dd], '=', temp00[dd - 1])

                                        sort[dd - 1] = temp00[dd]
                                        console.table(sort)
                                        dd++

                                    }

                                    if (d <= e) {
                                        sort[e] = temp00[d]
                                        console.log(sort[d], '=', temp00[e])
                                        console.table(sort)
                                    }


                                    for (let y = 0; y < arr.length; y++) {
                                        arr[y][0] = sort[y]
                                    }

                                    for (let u = 0; u < arr.length; u++) {
                                        for (let ii = 0; ii < arr.length; ii++) {
                                            if (arr[ii][0] == u) {
                                                ve[u] = arr[ii][1];
                                                break;
                                            }
                                        }
                                    }
                                    // for (let g = 0; g < ve.length; g++) {
                                    //     ve[g] = arr[g][1]
                                    //     console.table(arr)
                                    //     // console.log(ve)
                                    //     for (let x = 0; x < ve.length; x++) {
                                    //                     // console.log(o)
                                    //                     for (let i = 0; i < ve.length; i++) {

                                    //                         if (temp333[x] == ve[i]) {
                                    //                             sort[x] = i;

                                    //                             break;
                                    //                         }
                                    //                     }

                                    //                     // console.log(sort, "ASODASDNASJ")

                                    //                 }
                                    //                 // console.table(sort)k

                                    // }
                                    for (let t = 0; t < arr.length; t++) {
                                        arr[t][0] = sort[t]
                                        // console.table(arr)

                                    }
                                    console.table(arr)
                                    console.table(ve)
                                    console.table(sort)

                                    for (let s = 0; s < ve.length; s++) {
                                        document.getElementById(s).style.transform = "translate3d(0," + ve[s] + "px,0)"

                                    }
                                    console.log('break')
                                    d = arr.length
                                    e = arr.length
                                    break;
                                }


                                // console.log("gone")

                            }
                        }

                    }
                    // this.innerHTML = e.dataTransfer.getData('text/html');
                   

                    for (let ll = 0; ll < hor.length; ll++) {
                        var hh;
                        var t1, t2;
                        for (hh = 0; hh < sort.length; hh++) {

                            if (sort[hh] == ll) {
                                t1 = hh;

                                break
                            }
                        }
                        hor[hh] = h[ll]
                        ver[hh] = v[ll]
                        lebar[hh] = lb[ll]
                        tinggi[hh] = t[ll]
                        warna[hh] = w[ll]
                        console.log(hor)
                    }

                    // let temp = []

                    // hor[a] = hor[l]
                    // ver[a] = ver[l]
                    // lebar[a] = lebar[l]
                    // tinggi[a] = tinggi[l]
                    // warna[a] = warna[l]

                    // let c = l + 1;
                    // while (c <= a) {
                    //     hor[c - 1] = h[c]// ex (Square 2 = Square 1)
                    //     // console.log("3eq",(c-1) , c, hor)
                    //     ver[c - 1] = v[c]
                    //     lebar[c - 1] = lb[c]
                    //     tinggi[c - 1] = t[c]
                    //     warna[c - 1] = w[c]
                    //     c++
                    // }



                    var g = 0;
                    while (g < hor.length) {
                        g++
                        shape.clearRect(hor[g], ver[g], lebar[g], tinggi[g])
                        shape.fillStyle = warna[g]
                        shape.fillRect(hor[g], ver[g], lebar[g], tinggi[g])
                    }


                }


                return false;

            }
            function dragEnd(e) {
                this.style.opacity = '1';

                items.forEach(function (item) {
                    item.classList.remove('over');
                });
            }

            let items = document.querySelectorAll(' .lyrItems div');
            items.forEach(function (item) {
                item.addEventListener('dragstart', dragStart, false);
                item.addEventListener('dragover', handleDragOver, false);
                item.addEventListener('drop', dragDrop, false);
                item.addEventListener('dragend', dragEnd);

            });

        });




        function keyDown(e) {
            switch (e.keyCode) {
                case 17:
                    first_prs = true
                    console.log(second_prs)
                    if (second_prs) {
                        document.onkeyup = function () {
                            first_prs = false;
                            console.log("asdasdsadsadafd")
                        }
                    }
                    break;

                case 67:
                    if (first_prs) {

                        second_prs = true;

                    }
                    break;

                case 86:
                    if (first_prs && second_prs) {
                        anotherRect()
                        console.log('2222', x, y)
                        console.log("done")
                        first_prs = false
                        second_prs = false
                        paste = true;

                    } else if (!first_prs) {

                    }
                    break;
            }
        }

        console.log(paste)

        //Split From Here Kid
        //Split From Here Kid
        //Split From Here Kid
        //Split From Here Kid
        //Split From Here Kid
        //Split From Here Kid
        //Split From Here Kid
        //Split From Here Kid
        //Split From Here Kid
        //Split From Here Kid
        //Split From Here Kid



        // function cucn() {
        //     but += 1;
        //     console.log("shapeangle");
        //     console.log(but);
        //     if (but % 2 == 1)
        //         document.getElementById("shapeangle").style.backgroundColor = "red";
        //     else if (but % 2 == 0)
        //         document.getElementById("shapeangle").style.backgroundColor = "darkcyan";
        // }

        // function recMaxPos(id) {

        //     rec.style.left = wid + "px";
        // }

        // function drag(id) {
        //     recMaxPos();

        //     rec.style.position = "absolute";

        //     offset = {
        //         y: rec.offsetTop,
        //         x: rec.offsetLeft
        //     };
        //     dragg = rec;
        //     var cl = 0;
        //     MaxWidth = window.innerWidth;
        //     MaxHeight = window.innerHeight;
        //     imgWidth = rec.offsetWidth;
        //     imgHeight = rec.offsetHeight;
        //     allKeyMove();
        //     rec.onmousedown = function (e) {
        //         e = e || window.event;
        //         e.preventDefault();
        //         clX = e.clientX;
        //         clY = e.clientY;
        //         document.onmouseup = DragStop;
        //         document.onmousemove = MouseMove;
        //     }



        //     function MouseMove(e) {

        //         rec.style.cursor = "move"
        //         offset = {
        //             y: rec.offsetTop,
        //             x: rec.offsetLeft
        //         };

        //         console.log(i);
        //         var cursorX = clX - e.clientX;
        //         var cursorY = clY - e.clientY;
        //         clX = e.clientX;
        //         clY = e.clientY;

        //         if (offset.x >= MaxWidth - imgWidth - 2) {//1187 > 1186
        //             rec.style.left = MaxWidth - imgWidth - 3 + "px";
        //         }
        //         if (offset.y >= MaxHeight - imgHeight) {
        //             rec.style.top = MaxHeight - imgHeight + "px";
        //         }
        //         if (offset.x < wid)
        //             rec.style.left = wid + "px";

        //         if (offset.y <= -1)
        //             rec.style.top = 0;

        //         else if ((offset.x >= wid && offset.x < MaxWidth - imgWidth - 2) && (offset.y >= 0 && offset.y <= MaxHeight - imgHeight)) { //1186
        //             dragX = dragg.style.left = offset.x - cursorX + "px";
        //             dragY = dragg.style.top = offset.y - cursorY + "px";

        //         }



        //     }

        //     var clone;

        //     function allKeyMove(offSet) {

        //         document.onkeydown = (e) => {
        //             offset = {
        //                 y: rec.offsetTop,
        //                 x: rec.offsetLeft
        //             };
        //             if ((offset.x >= wid && offset.x < MaxWidth - imgWidth) && (offset.y >= 0 && offset.y <= MaxHeight - imgHeight)) {
        //                 switch (e.key) {
        //                     case "ArrowUp":
        //                         if (offset.y > 0) {
        //                             moveSpeed(offset, offset.x, "minus");
        //                             console.log("asdsadasda", offset.y)
        //                             dragY = dragg.style.top = offset.y + "px";
        //                             mCount += 1;
        //                         }
        //                         console.log(offset.y, mCount)
        //                         break;

        //                     case "ArrowDown":
        //                         if (offset.y < MaxHeight - imgHeight) {
        //                             moveSpeed(offset, offset.x, "plus");
        //                             dragY = dragg.style.top = offset.y + 1 + "px";
        //                             mCount += 1
        //                         }
        //                         console.log(dragY, offset.y)
        //                         break;

        //                     case "ArrowRight":
        //                         if (offset.x < MaxWidth - imgWidth - 2) {
        //                             moveSpeed(offset.y, offset, "plus");
        //                             dragX = dragg.style.left = offset.x + 1 + "px";
        //                             mCount += 1;
        //                         }
        //                         console.log(offset.x)
        //                         break;

        //                     case "ArrowLeft":
        //                         if (offset.x > wid) {
        //                             moveSpeed(offset.y, offset, "minus");
        //                             dragX = dragg.style.left = offset.x + "px";
        //                             mCount += 1;
        //                         }
        //                         console.log(offset.x)
        //                         break;
        //                 }

        //                 if (e.keyCode == 17) {
        //                     bal = true;
        //                     clone = rec.cloneNode(true);

        //                 }

        //                 if (e.keyCode == 67 && bal) {
        //                     idCount += 1
        //                     bol = true;
        //                     console.log("down", bal, bol)
        //                     clone.id = 'shapeangle' + idCount;
        //                     clone.classList.add('shapeangle');
        //                     rec.after(clone);
        //                     layerItemList();
        //                 }

        //                 document.onkeyup = (e) => {
        //                     switch (e.keyCode) {
        //                         case 37: case 38: case 39: case 40:
        //                             mCount = 0;
        //                             break;

        //                         case 17:
        //                             bal = false;

        //                         case 67:
        //                             bol = false;
        //                     }
        //                 }
        //                 if (bol == true && bal == true) {
        //                     console.log("asdasdasd")
        //                 }
        //             }

        //         }

        //         function moveSpeed(offSetY, offSetX, shapeanglev) {
        //             switch (true) {

        //                 case (mCount >= 10 && mCount < 60):
        //                     var mSpeed = 3;
        //                     if (shapeanglev == "minus") {
        //                         offSetY.y -= mSpeed;
        //                         offSetX.x -= mSpeed;
        //                         console.log("mCount : ", mCount, "offSet : ", offSetY.y)
        //                     } else if (shapeanglev == "plus") {
        //                         offSetY.y += mSpeed;
        //                         offSetX.x += mSpeed;
        //                     }
        //                     break;

        //                 case mCount >= 60:
        //                     mSpeed = 10;
        //                     if (shapeanglev == "minus") {
        //                         offSetY.y -= mSpeed;
        //                         offSetX.x -= mSpeed;
        //                         console.log("TOJIIIIIIIIIIIII mCount : ", mCount, "offSet : ", offSetY.y)
        //                     } else if (shapeanglev == "plus") {
        //                         offSetY.y += mSpeed;
        //                         offSetX.x += mSpeed;
        //                     }


        //             }
        //         }
        //     }

        //     function DragStop() {
        //         document.onmouseup = null;
        //         document.onmousemove = null;
        //         rec.style.cursor = "pointer"
        //     }

        // }



    </script>
</body>

</html>
